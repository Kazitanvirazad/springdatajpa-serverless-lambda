# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: spring-serverless-cloud
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: java17
  region: ${self:custom.region}
  profile: kazitanvir.azad@xxxxxxxxxxxxxxx.com
  stage: dev
  timeout: 10
  memorySize: 128
  environment:
    REGION: ${self:provider.region}
    DATABASE_URL: ${self:custom.dburl}
    DATABASE_USER: ${self:custom.dbuser}
    DATABASE_PASSWORD: ${self:custom.dbpass}
  apiGateway:
    restApiId: xxxxxxxxxx
    restApiRootResourceId: xxxxxxxxxx
  iam:
    role: arn:aws:iam::xxxxxxxxxxxx:role/xxxxxx-xxx-xxxxx

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

custom:
  region: us-east-1
  dburl: jdbc:mysql://xxxxx-xxx.xxxxxxxxxxxx.us-east-1.rds.amazonaws.com:3306/vehicledb
  dbuser: xxxx
  dbpass: xxxxxxxxxxx


# you can add packaging information here
package:
  artifact: target/spring-serverless-cloud-dev.jar
  individually: true
  exclude:
    - README.md
    - .git/**
    - postman
    - .settings/**
    - .classpath
    - .gitignore
    - .project
    - .idea

functions:
  apihealth:
    handler: com.serverless.handler.HelloHandler
    timeout: 10
    memorySize: 512
  FetchVehicle:
    handler: com.serverless.handler.FetchVehicle
    timeout: 15
    memorySize: 1024
  FetchVehicleByID:
    handler: com.serverless.handler.FetchVehicleByID
    timeout: 15
    memorySize: 1024
  AddVehicle:
    handler: com.serverless.handler.AddVehicle
    timeout: 15
    memorySize: 1024
  DeleteVehicleById:
    handler: com.serverless.handler.DeleteVehicleById
    timeout: 15
    memorySize: 1024
  UpdateVehicleById:
    handler: com.serverless.handler.UpdateVehicleById
    timeout: 15
    memorySize: 1024
  FetchVehiclesByType:
    handler: com.serverless.handler.FetchVehiclesByType
    timeout: 15
    memorySize: 1024
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
